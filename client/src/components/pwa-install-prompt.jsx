import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { X, Download, Smartphone } from 'lucide-react';
import { useLanguage } from '@/contexts/language-context';
import { MobileShortcutGenerator } from './mobile-shortcut-generator';

export function PWAInstallPrompt() {
  const [deferredPrompt, setDeferredPrompt] = useState(null);
  const [isVisible, setIsVisible] = useState(false);
  const [isInstalled, setIsInstalled] = useState(false);
  const { t } = useLanguage();

  useEffect(() => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ª–∏ —É–∂–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    const checkIfInstalled = () => {
      // –°–ø–æ—Å–æ–± 1: –ø—Ä–æ–≤–µ—Ä–∫–∞ display-mode
      const isStandalone = window.matchMedia('(display-mode: standalone)').matches;
      // –°–ø–æ—Å–æ–± 2: –ø—Ä–æ–≤–µ—Ä–∫–∞ navigator.standalone (iOS Safari)
      const isIOSStandalone = window.navigator.standalone === true;
      
      return isStandalone || isIOSStandalone;
    };

    setIsInstalled(checkIfInstalled());

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ beforeinstallprompt
    const handleBeforeInstallPrompt = (e) => {
      console.log('PWA: beforeinstallprompt event fired');
      e.preventDefault(); // –û—Ç–º–µ–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      setDeferredPrompt(e);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
      if (!checkIfInstalled()) {
        // –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–æ–º–ø—Ç–∞ (–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Å–∞–π—Ç–æ–º)
        setTimeout(() => {
          setIsVisible(true);
        }, 10000); // 10 —Å–µ–∫—É–Ω–¥
      }
    };

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
    const handleAppInstalled = () => {
      console.log('PWA: appinstalled event fired');
      setIsInstalled(true);
      setIsVisible(false);
      setDeferredPrompt(null);
      
      // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
      if (typeof window !== 'undefined' && window.toast) {
        window.toast({
          title: t('appInstalled') || '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!',
          description: t('appInstalledDesc') || '–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å–∫–∞—Ç—å –∏–≥—Ä—É —Å —Ä–∞–±–æ—á–µ–≥–æ —Å—Ç–æ–ª–∞',
        });
      }
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, [t]);

  const handleInstallClick = async () => {
    if (!deferredPrompt) {
      console.log('PWA: No deferred prompt available');
      return;
    }

    try {
      // –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É—Å—Ç–∞–Ω–æ–≤–∫–∏
      deferredPrompt.prompt();
      
      // –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { outcome } = await deferredPrompt.userChoice;
      
      console.log(`PWA: User response to install prompt: ${outcome}`);
      
      if (outcome === 'accepted') {
        console.log('PWA: User accepted the install prompt');
      } else {
        console.log('PWA: User dismissed the install prompt');
      }
      
      // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
      setIsVisible(false);
      setDeferredPrompt(null);
    } catch (error) {
      console.error('PWA: Error during installation:', error);
    }
  };

  const handleDismiss = () => {
    setIsVisible(false);
    // –ó–∞–ø–æ–º–Ω–∏—Ç—å, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª–æ–Ω–∏–ª (–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ localStorage)
    localStorage.setItem('pwa-install-dismissed', Date.now().toString());
  };

  // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –Ω–µ –æ—Ç–∫–ª–æ–Ω—è–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–¥–∞–≤–Ω–æ
  const isDismissedRecently = () => {
    const dismissed = localStorage.getItem('pwa-install-dismissed');
    if (!dismissed) return false;
    
    const dismissedTime = parseInt(dismissed);
    const now = Date.now();
    const dayInMs = 24 * 60 * 60 * 1000;
    
    return (now - dismissedTime) < (dayInMs * 7); // 7 –¥–Ω–µ–π
  };

  // –ù–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å, –µ—Å–ª–∏ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ –Ω–µ–¥–∞–≤–Ω–æ, –∏–ª–∏ –Ω–µ—Ç –ø—Ä–æ–º–ø—Ç–∞
  if (isInstalled || isDismissedRecently() || !isVisible || !deferredPrompt) {
    return null;
  }

  return (
    <div className="fixed bottom-4 left-4 right-4 z-50 md:left-auto md:right-4 md:w-80">
      <Card className="bg-gradient-to-r from-blue-600 to-purple-600 border-blue-500 shadow-2xl">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <div className="flex items-center gap-2">
              <Smartphone className="w-5 h-5 text-white" />
              <CardTitle className="text-white text-sm">
                {t('installApp') || '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ'}
              </CardTitle>
            </div>
            <Button
              variant="ghost"
              size="sm"
              onClick={handleDismiss}
              className="h-6 w-6 p-0 text-white hover:bg-white/20"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
          <CardDescription className="text-blue-100 text-xs">
            {t('installAppDesc') || '–î–æ–±–∞–≤—å—Ç–µ —è—Ä–ª—ã–∫ –Ω–∞ —Ä–∞–±–æ—á–∏–π —Å—Ç–æ–ª –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∏–≥—Ä–µ'}
          </CardDescription>
        </CardHeader>
        <CardContent className="pt-0">
          <div className="flex flex-col gap-2">
            <Button 
              onClick={handleInstallClick}
              className="bg-white text-blue-600 hover:bg-blue-50 w-full text-sm"
              size="sm"
            >
              <Download className="w-4 h-4 mr-2" />
              {t('installNow') || '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ–π—á–∞—Å'}
            </Button>
            <div className="px-2">
              <MobileShortcutGenerator />
            </div>
            <div className="text-xs text-blue-200 text-center">
              {t('installBenefits') || '–ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫ ‚Ä¢ –û—Ñ—Ñ–ª–∞–π–Ω —Ä–µ–∂–∏–º ‚Ä¢ –ü–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω—ã–π —Ä–µ–∂–∏–º'}
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

// iOS Safari —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–π –ø–æ —É—Å—Ç–∞–Ω–æ–≤–∫–µ
export function IOSInstallInstructions() {
  const [showInstructions, setShowInstructions] = useState(false);
  const { t } = useLanguage();

  useEffect(() => {
    // –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ iOS Safari –∏ –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ
    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent);
    const isIOSSafari = isIOS && !navigator.standalone && !window.MSStream;
    const isNotInstalled = !window.matchMedia('(display-mode: standalone)').matches;
    
    if (isIOSSafari && isNotInstalled) {
      // –ü–æ–∫–∞–∑–∞—Ç—å —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è
      setTimeout(() => {
        setShowInstructions(true);
      }, 15000); // 15 —Å–µ–∫—É–Ω–¥
    }
  }, []);

  if (!showInstructions) return null;

  return (
    <div className="fixed bottom-4 left-4 right-4 z-50">
      <Card className="bg-gradient-to-r from-green-600 to-blue-600 border-green-500 shadow-2xl">
        <CardHeader className="pb-3">
          <div className="flex items-center justify-between">
            <CardTitle className="text-white text-sm">
              üì± {t('addToHomeScreen') || '–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω'}
            </CardTitle>
            <Button
              variant="ghost"
              size="sm"
              onClick={() => setShowInstructions(false)}
              className="h-6 w-6 p-0 text-white hover:bg-white/20"
            >
              <X className="w-4 h-4" />
            </Button>
          </div>
        </CardHeader>
        <CardContent className="pt-0">
          <div className="text-xs text-green-100 space-y-1">
            <div>1. {t('tapShareButton') || '–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–ü–æ–¥–µ–ª–∏—Ç—å—Å—è"'} üì§</div>
            <div>2. {t('selectAddToHome') || '–í—ã–±–µ—Ä–∏—Ç–µ "–î–æ–±–∞–≤–∏—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—ã–π —ç–∫—Ä–∞–Ω"'}</div>
            <div>3. {t('confirmInstall') || '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É'}</div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}